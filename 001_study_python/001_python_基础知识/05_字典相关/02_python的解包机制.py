# 解包， 英文名字叫做unpacking,就是将容器中所有的元素逐个的取出来

# python中的解包操作是自动完成的，例如
a, b, c = ['1', '2', '3']
print(a, b, c)

# 除了列表对象可以解包外，Python中的任何可迭代对象都可以进行解包操作
# 列表， 元组， 字典 ，字符串

a, b, c = {1: 'A', 2: 'B', 3: 'C'}
print(a, b, c)

# 如果在解包过程中左边变量的个数不等于右边可迭代对象中元素的个数，
# 在python 3中可以在某一个可迭代对象的前面加上一个*，
# 这个*可以放置在任意位置，如果*放在中间，解释器会对没有*的变量进行匹配，剩余元素全部匹配给带*的变量
a, *b, c = [1, 2, 3, 4, 5]
print(a, b, c)

# 函数中的解包操作
# 函数调用时可能会用到两个符号，* 和 **
def func(a, b, c):
    print(a, b, c)


func(1, 2, 3)

# func函数中定义了三个形参参数，调用该函数时，可以传入3个实参，此外也能够传入包括一个包含3个元素的可迭代对象，使用* 进行解包
a = ['1', '2', '3']
def func(a, b, c):
    print(a, b, c)

func(*a)

# 在可迭代对象为字典时，一个*号传入的实参为key值，两个**拆解成键值对形式(字典的键值必须对应默认参数的形参值)
d = {'a': 1, 'b': 2, 'c':3}
def func(a, b, c):
    print(a, b, c)
func(*d)
func(**d)

# 解包操作除了用在函数调用还能够用在表达式中
m = *range(4), 4
print(m)

m = [*range(4), 5]
print(m)

# 如何优雅的合并两个字典
a = {'A': 1, 'b': 2}
b = {'C': 3, 'd': 4}
c = {**a, **b, 'e': 5, 'f': 6}
print(c)

