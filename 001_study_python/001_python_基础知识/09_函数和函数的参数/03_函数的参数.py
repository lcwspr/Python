# 参数，传递信息给函数

def show(x):
    print(x)

show('hello world')

'''
什么叫参数
参数的语法
形参和实参的概念
'''

# 参数
    # 没有参数
        # 定义函数和调用函数时括号里什么都不写
    # 有一个参数
        # 传什么就是什么
    # 有多个参数


def test(a, b):
    pass

# 站在实参的角度上面
    # 按照位置传参
test('a', 'b')
    # 按照关键字传参
test(b='b', a='a')
'''
    # 可以混着用，但是必须先按照位置传参，再按照关键字传参
    # 不能给同一个变量传递多个值
'''
# test(3, a='3')       报错


# 站在形参的角度上面
    # 位置参数    必须传，且有几个参数就传几个值
    # 默认参数，可以不传递，如果不传递就使用默认的，传递就用传递的
        # 顺序，  注意，必须要先定义位置参数，后定义默认参数
    # 动态参数  可以接受任意多个参数，就是一个元组（习惯参数名args）
        # 顺序，  注意，必须要先定义位置参数，*args ，后定义默认参数
    # **动态参数
#         顺序  普通参数，位置参数,*args,默认参数, **kwargs


def func(*args, l=[]):
    print(args, l)


func(1, 2, 'str', [1, 2, 3])
func(1, 2, 'str', l = [1, 2, 3])


def fun(**kwargs):
    print(kwargs)

fun(a=1, b=2, c=3)

# 动态参数有两种  可以接受任意个参数
    # *args 接受按照位置传参的值，组成一个元组
    # **kwargs 接受按照关键字传递参数的值，组织成一个字典
        # 顺序 *args必须在**kwargs之前

def func(*args, **kwargs):
    print(args, kwargs)

func(244,32,54,3,5,a='4', b=3)


# 最后的顺序
#         顺序  普通参数，位置参数,*args,默认参数, **kwargs
def fun(a, b, *args, defaule=1, **kwargs):
    print(a, b, args, defaule, kwargs)


# 动态参数的另外一种传参方式
def func(*args): # 站在形参角度上，给变量加上*，就是组合所有传来的值。
    print(args)

l = [1, 2, 3, 4, 5]
func(*l)  # 站在实参的角度上，给一个序列加上*，就是将这个序列按照顺序打散


def func(**kwargs):
    print(kwargs)

d = {'a':1, 'b':3}
func(**d)


# 函数的注释
def func():
    '''
    这个函数的功能
    参数1
    参数2

    :return: 字符串
    '''
    pass


# 函数   今天总结
#     定义
#     调用
#     返回值
#     函数参数
        #形参
            # 位置参数      必须传
            # *args        接收多个位置参数
            # 默认参数      可以不穿
            # **kwargs     可以接受多个关键字参数
        #实参：按照位置传参，按照关键字传参

# 文件的修改