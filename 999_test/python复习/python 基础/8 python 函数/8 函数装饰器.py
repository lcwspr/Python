"""
    装饰器
        作用
                在函数名以及函数体不改变的前提下  给一个函数附加一些额外代码
        语法
        案例
                发说说
                发图片

                开放 封闭原则
                        已经写好的代码  尽量不要修改
                        如果想要新增功能  在原先代码基础上 单独进行拓展

                单一职责原则
                        已经定好功能名称的函数  不要添加不相干的功能代码

        注意
        进阶


"""


def checkLogin():
    print("验证登录")
    fss()  # 这样也不行呀    代码不能写死呀


def checkLogin2():
    print("验证登录")
    ftp()  # 这样也不行呀    登录代码冗余   而且业务逻辑必须修改


#  我可以接收一个函数  来进行冗余代码的去处
def checkLogin3(func):
    print("登录验证")
    func()  # 但是 业务逻辑代码 必须要尽心修改


# 那究竟该怎么办。。。
# 借助于闭包

def checkLogin4(func):
    def inner():
        print("登录验证。。。")
        func()

    return inner


# 代替行不行
# fss = checkLogin4(fss)  # 能不能行 函数不是在这里运行的   借助于闭包


# fss = def inner():
#     print("登录验证")
#     fss()                   # 相当于是这样


# 定义两个功能函数
@checkLogin4
def fss():
    print("发说说")
    ## 加在这里


#     checkLogin()

@checkLogin4
def ftp():
    print("发图片")
    ## 加在这里


#     checkLogin()


# 相关的逻辑代码
btnIndex = 1
if btnIndex == 1:
    #print("登陆验证")
    fss()
else:
    #print("登陆验证")
    ftp()

# 要将功能模块函数部分  和 业务逻辑代码部分 分离开
# 我们关注的是具体应该做什么  而不是具体应该怎么做

# 一个新的需求
# 发说说  发图片  必须有一个前提  就是用户必须登录之后
# 登录验证的操作


# 1 直接在业务逻辑代码里面去修改   添加一个验证操作
# 功能性的函数 重用性很大
# 功能函数 一般是不变的    业务逻辑代码会十分多
# 因为业务逻辑代码非常多  所以 就造成了  每一份 业务逻辑代码  在调用具体的函数之前  都需要去做一个登陆验证  这样代码的冗余度就比较大   代码的复用性比较差   代码的维护性比较差


# 2 直接在功能函数里面  去修改    方便代码的重用
#   但是 如果功能函数也很多  也都需要登陆验证时    直接复制 粘贴代码的重用性很很差
# 可以抽取 登陆验证代码     成为一个函数  在功能代码中调用函数


# 3  那么究竟如果  添加登录验证功能那？


# 语法糖功能  写法
# @checkLogin4   #加入一个登录验证
