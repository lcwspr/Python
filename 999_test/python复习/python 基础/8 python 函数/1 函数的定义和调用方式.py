"""
    函数的概念
         概念 ： 写了一段代码 来实现了某一个小功能  然后把这些代码集中到一起 起一个名字 下一次就可以根据这个名字再次使用这个代码块  这就是函数的作用
         作用 ： 方便代码的重用
                分解任务简化程序逻辑
                使代码更加模块化
        函数分类
                内建函数
                三方函数
                自定义函数


        函数的作用：  如果没有函数
                    文件的大小会变大
                    代码的冗余度比较大      重用性比较差
                    代码的可维护性比较差

        def pFunc():
            print(1)
            ....



    函数的基本使用

        简单定义  def 函数名():
                     函数体
                函数调用  函数名()


        单个参数
                场景  需要动态的调整函数体中某一个处理信息  则可以以参数的形式接收到相关的数据
                定义  def 函数名(函数名称):
                            函数体  函数体   可以直接以变量的方式使用该参数
                函数的调用  函数名(参数值)
                形参和实参的概念   参数名称  为 形参       传递的真实数据  为实参



        函数接收多个参数
                场景  需要动态的调整函数体中多个处理信息时  则可以以逗号作为分割  接收多个参数
                定义  def 函数名(参数1, 参数2)
                            函数体   可以直接以变量的方式使用所有参数
                调用
                        方式1
                            函数名(参数1， 参数2 ， 参数3)  形参和实参一一对应

                        方式2
                            函数名(参数名称1 = 参数1,参数名称2 = 参数2 )
                                可以指明形参名称    称为关键字参数
                                不需要严格按照格式


        不定长参数       (目的  接受多个参数   并使得调用更加简单 方便)
                可以传入一个列表或元组  可以遍历集合  得出结果

                场景： 如果函数体中  需要处理的数据  不确定长度  则可以以不定长参数的方式接受数据
                方式1
                        定义
                            def  函数名(*args)  元组
                                    函数体   函数体中   可以直接以元组变量的方式使用该参数
                        使用
                            函数名(参数1, 参数2, ....)

                    使用元组  为什么不适用列表    （让我们在函数体内   尽量少更改参数）


                方式2
                        定义
                            def 函数名(**dic)  字典
                                    函数体内  可以直接以字典变量的方式使用该参数
                        使用
                             函数名(参数名称1  = 参数1 , 参数名称2 = 参数2, ....)

                        必须使用关键字参数形式调用

                        例子
                            def mySum(**kwargs):
                                print(kwargs)

                        mySum(name = "sz", age = 12)


                参数的拆包和装包
                    装包    把传递的参数  包装成一个集合  称之为“装包”
                    拆包    把传递的参数  再次分解成单独的个体   称之为 “拆包”

                    def test(*args):
                        print(args)

                        print(*args)

                    test(1, 2, 3, 4)





                缺省参数
                       场景 当我们使用一个函数时 如果大部分时候 使用的某个数据是一个固定值  或者属于主功能之外的小功能实现  则可以使用默认值    这种默认值  称为 “缺省参数”
                        定义 def 函数名（变量名1 = 默认值1 ， 变量名2 = 默认值2）
                                函数体  函数体中   即使外界没有传递指定变量  也可以使用  只不过值时给定的默认值
                        使用  函数名(变量1,变量2)  此处如果是缺省参数  则可以不填写





    函数的参数
    函数的返回值
    函数的使用描述
    函数的作用域
    匿名函数
    闭包
    递归
    生成器




"""


def test(*args):
    print(args)
    print(*args, type(args))  # 被拆出来


test(1, 2, 3, 4)


# 拆包操作 例子
def sum2(a, b, c, d):
    print(a + b + c + d)


def test2(*args):
    print(args, type(args))
    # 拆包
    print(*args)

    # 可以单独的取出来
    sum2(args[0], args[1], args[2], args[3])

    # 可以使用拆包 可以直接的拿到1 2 3 4   可以把拆包后的数据在传递给一个函数
    sum2(*args)


test2(1, 2, 3, 4)


def mySum(a, b):
    print(a)
    print(b)


def test(**kwargs):
    print(kwargs)

    # 拆包操作
    # 应该使用两个** 进行拆包操作

    # print(**kwargs)
    # 相当于  a = 1, b = 2
    mySum(**kwargs)


test(a=1, b=2)
# 必须要保证拆包的一一对应


# 排序函数sorted
result = sorted([1, 4, 6, 2, 8], reverse=True)
print(result)

# 参数注意

'''
    值传递  和  引用传递
    
    值传递  
        是指传递过来的  是一个数据的副本 修改副本  对元件没有任何影响    
    
    引用传递
        是指传递过来的  是一个变量的地址   通过地址  可以操作同一根原件
        
        
但是注意
        在Python中 你没得选  只有引用传递 (地址传递)
        但是  
            如果数据类型时可变类型   则可以改变原件
            如果数据类型时不可变类型   则不可以改变原件
            
        
        
'''


def change(num):
    print(num, id(num))
    num = 20
    print(num, id(num))


b = 10
print(b, id(b))
change(b)
print(b)

"""
    注意  Python中  只有引用传递 
    



"""


def change2(num):
    print(num, id(num))
    num.append("hehe")
    print(num, id(num))


c = ["lcwspr", "hello"]
print(c, id(c))
change2(c)
print(c, id(c))

l = [{"name": "sz", "old": 45}, {"name": "g2", "old": 88}, {"name": "mm", "old": 2}]
l.sort(key=lambda x: x["old"])

print(l)


def show():
    m = 20
    def test():
        nonlocal m
        m = 40

    print(m)
    test()
    print(m)
    return test

t = show()
