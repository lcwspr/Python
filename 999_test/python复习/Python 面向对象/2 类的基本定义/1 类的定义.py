"""
    1 如何定义一个类
                class 类名:
                    pass

    经典类     新式类
            类名 使用大驼峰标识


    2 怎样通过类  创建(实例化)出一个对象
            one = Money()
            print(one)




类的名称   Money.__name__
不管类怎么赋值   类名总是 不变的

类的定义底层原理
    当定义类时   先在底层开辟一块空间
    然后  设置__name__ 为类名
    Money  引用着内存的中实际对象

根据Money类产生对象  把对象的引用返回给a
通过对象的属性 __class__  可是查看对象所属的类



    3 属性相关
            属性和变量的区别及判定依据
                区别
                    概念
                            变量是‘可以改变的量值’
                            属性时‘属于某个对象的特性’
                    访问权限
                            变量  根据不同的位置 存在不同的访问权限
                                    （全局变量   局部变量）
                            属性   只能通过对象来进行访问
                                    所以  必须先找到对象
                                    对象也是通过变量名来引用  而既然是变量 也有对应的访问权限

            判定依据
                    是否存在宿主



            （根据宿主的不同）
            对象属性
                        怎样让一个对象拥有一些属性(增)
                            1 直接通过对象 动态添加
                                        语法
                                            对象.属性 = 值
                            2 通过类的初始化方法（构造方法）
                                        __init__方法


                        对象的  __dict__ 属性 能够查看对象的所有属性 (字典  键属性名称  值 属性值)


                        怎样访问一个对象的属性(查)
                            对象.属性
                            方法里面还有可能通过self进行访问


                        怎样修改一个对象的属性(改)
                            对象.属性 = 值
                            存在就是修改  不存在就是新增
                                访问不存在的属性会报错AttributeError


                        怎样删除一个对象的属性(删)
                        p.age = 18
                        del p.age  通过del语句删除对象属性

                        补充
                                查看对象所有的属性
                                对象__dict__  来访问

                                不同的对象之间不能够互相访问对方的属性


            类属性
                        万物皆对象   类也是一个对象

                        怎样让一个类拥有属性
                                方式1  类名.类属性 = 值

                                方式2    class Dog:
                                            dogCount = 0
                                        # 直接在类里面写 就可以


                        怎样查询一个类的属性

                                直接使用类来访问
                                Money.age

                                根据类的对象访问
                                one = Money()
                                one.age

                            注意  为什么可以通过对象访问到类的属性
                                    和Python对象的属性查找机制有关

                                    优先到对象自身去查找属性   找到则结束
                                    如果没有找到
                                        则根据__class__ 找到对象对应的类
                                        到这个类里面查找

                            如果我把one的__class__改掉  还能访问吗



                        怎样修改一个类的属性
                            通过类名进行修改
                                Money.age = 34

                            能否通过对象改
                                直接写 会在对象中增加一个属性


                        怎样删除一个类的属性
                            通过类名删除    del 类名.属性

                            能够通过对象删除   不能  del语句只删除直系属性


                        注意
                                类属性的内存存储问题

                                    其实对象和类 属性是存储在dict字典中
                                    但是类的字典是只读属性  不能修改的    可通过函数去改


                                    一般情况下 属性存储在__dict__的字典中 有些内置对象没有这个__dict__属性    一般对象可以直接修改__dict__属性
                                    但类对象的__dict__为只读属性  默认无法修改   可以通过setattr方法修改

                                类属性被各个对象所共享

                        补充


            对象属性和类属性之间的区别联系
            高级



    4 方法相关
    5 补充



"""


# 类的定义
class Money:
    pass


# 对象的实例化
a = Money()
print(a)
print(Money)

print(Money.__name__)
xxx = Money
print(xxx)

ppp = a.__class__
print(ppp.__class__)

m = ppp()
print(m)

# 给m对象添加一个属性
m.age = 18

# 4 验证是否成功、
print(m.age)

# 5 查看m对象的所有属性

print(m.__dict__["age"])

# 6 引用一个列表    修改后指向新的内存空间
m.pets = ["小花", "小明"]

print(m.pets)
print(m.__dict__)
m.pets = [1, 2]

print(m.pets)
# 如果访问对象属性  修改列表不会改变内存空间


# 7 创建类属性
one = Money()
one.hell = 9  # 对象属性
Money.first = 8  # 类属性

print(Money.__dict__)

























